---
import { getImage } from "astro:assets";
import { getCollection, getEntry, render } from "astro:content";
import Layout from "../../layouts/Layout.astro";

// Build-time: generate slugs, prefixing unpublished posts with `_draft-` for preview.
export async function getStaticPaths() {
	const articles = await getCollection("blog");
	return articles.map((entry) => {
		const base = entry.id;
		const isPublished = entry.data.published === true;
		const finalSlug = !isPublished && !base.startsWith("_draft-") ? `_draft-${base}` : base;
		return { params: { slug: finalSlug }, props: { article: entry } };
	});
}

// Runtime: normalize slug back (strip `_draft-`) to fetch original entry id.
const { slug } = Astro.params as { slug: string | undefined };
const normalizedSlug = slug?.startsWith("_draft-") ? slug.slice("_draft-".length) : slug;
const article = await getEntry("blog", normalizedSlug);
if (!article) {
	throw new Error(`Article not found: ${normalizedSlug}`);
}

const { Content } = await render(article);

const blogImages = import.meta.glob("/src/content/blog/**/*.{jpg,png,webp}", { eager: true });

const imagePath = article.data.image ? `/src/content/blog/${slug}/${article.data.image}` : undefined;
let resolvedImage: unknown;
if (imagePath && blogImages[imagePath] && typeof blogImages[imagePath] === "object") {
	const maybeMod = blogImages[imagePath] as { default?: unknown };
	if (maybeMod.default) resolvedImage = maybeMod.default;
}
const img =
	imagePath && resolvedImage
		? await getImage({
				src: resolvedImage as unknown as string,
				width: 1200,
				height: 630,
				format: "jpg",
			})
		: undefined;

// Title truncation logic: ensure max 60 chars with punctuation-aware rules.
const MAX_TITLE_LEN = 60;
function truncateTitle(original: string): string {
	if (!original) return original;
	if (original.length <= MAX_TITLE_LEN) return original;
	const window = original.slice(0, MAX_TITLE_LEN);
	const findLast = (chars: string) => {
		let pos = -1;
		for (const ch of chars) {
			const i = window.lastIndexOf(ch);
			if (i > pos) pos = i;
		}
		return pos;
	};
	// Sentence-ending punctuation (. ? !)
	let pos = findLast(".?!");
	if (pos !== -1) {
		return window.slice(0, pos + 1).trim();
	}
	// Separators (: ;)
	pos = findLast(":;");
	if (pos !== -1) {
		return window.slice(0, pos).trim();
	}
	// Comma (,): keep comma then add ellipsis ensuring total <= 60
	pos = window.lastIndexOf(",");
	if (pos !== -1) {
		const cut = Math.min(pos + 1, MAX_TITLE_LEN - 3); // leave room for ...
		return `${window.slice(0, cut).trimEnd()}...`;
	}
	// Fallback: cut at last space before limit-3 if possible
	const spacePos = window.lastIndexOf(" ", MAX_TITLE_LEN - 3);
	if (spacePos > 20) {
		// avoid trimming to something too tiny
		return `${window.slice(0, spacePos).trimEnd()}...`;
	}
	return `${window.slice(0, MAX_TITLE_LEN - 3).trimEnd()}...`;
}

const truncatedTitle = truncateTitle(article.data.title);
---


<Layout 
	title={truncatedTitle} 
	image={img}
	description={article.data.description} 
	keywords={article.data.keywords}
	noIndex={!article.data.published} 
	canonical={article.data.canonical ?? undefined} 
	noHeader>
  <article>
    {/** Render markdown as HTML using Astro's set:html directive */}
	  <Content />
		<footer>
			<p class="published">
				Published on <time datetime={article.data.date}>{article.data.date.toLocaleDateString()}</time>
				{article.data.canonical && (
					<>
						{' '}via <a href={article.data.canonical} target="_blank" rel="noopener noreferrer">
							{new URL(article.data.canonical).hostname.replace(/^www\./, '').split('.')[0]}
						</a>
					</>
				)} by <a href="/about/" class="author">MichaÃ«l Vanderheyden</a>
			</p>
			{article.data.updated && (
				<p class="updated">
					Last updated on <time datetime={article.data.updated}>{article.data.updated.toLocaleDateString()}</time>
				</p>
			)}
		</footer>
  </article>
</Layout>
