---
import { getImage } from "astro:assets";
import { getCollection, getEntry, render } from "astro:content";
import Layout from "../../layouts/Layout.astro";

// Build-time: generate slugs, prefixing unpublished posts with `_draft-` for preview.
export async function getStaticPaths() {
	const articles = await getCollection("blog");
	return articles.map((entry) => {
		const base = entry.id;
		const isPublished = entry.data.published === true;
		const finalSlug = !isPublished && !base.startsWith("_draft-") ? `_draft-${base}` : base;
		return { params: { slug: finalSlug }, props: { article: entry } };
	});
}

// Runtime: normalize slug back (strip `_draft-`) to fetch original entry id.
const { slug } = Astro.params as { slug: string | undefined };
const normalizedSlug = slug?.startsWith("_draft-") ? slug.slice("_draft-".length) : slug;
const article = await getEntry("blog", normalizedSlug);
if (!article) {
	throw new Error(`Article not found: ${normalizedSlug}`);
}

const { Content } = await render(article);

const blogImages = import.meta.glob("/src/content/blog/**/*.{jpg,png,webp}", { eager: true });

const imagePath = article.data.image ? `/src/content/blog/${slug}/${article.data.image}` : undefined;
let resolvedImage: unknown;
if (imagePath && blogImages[imagePath] && typeof blogImages[imagePath] === "object") {
	const maybeMod = blogImages[imagePath] as { default?: unknown };
	if (maybeMod.default) resolvedImage = maybeMod.default;
}
const img =
	imagePath && resolvedImage
		? await getImage({
				src: resolvedImage as unknown as string,
				width: 1200,
				height: 630,
				format: "jpg",
			})
		: undefined;
---


<Layout 
	title={article.data.title} 
	image={img}
	description={article.data.description} 
	keywords={article.data.keywords}
	noIndex={!article.data.published} 
	canonical={article.data.canonical ?? undefined} 
	noHeader>
  <article>
    {/** Render markdown as HTML using Astro's set:html directive */}
	  <Content />
		<footer>
			<p class="published">
				Published on <time datetime={article.data.date}>{article.data.date.toLocaleDateString()}</time>
				{article.data.canonical && (
					<>
						{' '}via <a href={article.data.canonical} target="_blank" rel="noopener noreferrer">
							{new URL(article.data.canonical).hostname.replace(/^www\./, '').split('.')[0]}
						</a>
					</>
				)} by <a href="/about" class="author">MichaÃ«l Vanderheyden</a>
			</p>
			{article.data.updated && (
				<p class="updated">
					Last updated on <time datetime={article.data.updated}>{article.data.updated.toLocaleDateString()}</time>
				</p>
			)}
		</footer>
  </article>
</Layout>
